; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Octii"
#define MyAppVersion "2.2"
#define MyAppPublisher "Innatical"
#define MyAppURL "https://octii.chat"
#define MyAppExeName "octii-desktop-windows-x64.exe"
#define MyInstallerIcon "..\assets\Icon.ico"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{B1851C54-C471-4E8C-966C-23F36A2939B7}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputDir=..\
OutputBaseFilename=Octii Installer
Compression=lzma
SolidCompression=yes
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
SetupIconFile={#MyInstallerIcon}

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "..\dist\octii-desktop-windows-x64.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\webview.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\WebView2Loader.dll"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "..\assets\Icon.ico"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\Icon.ico"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\Icon.ico"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
function InstallWebview2: Boolean;
var
  ResultCode: Integer;
begin
  if Exec(ExpandConstant('{tmp}\MicrosoftEdgeWebview2Setup.exe'), '-silent -install', '', SW_SHOW,
     ewWaitUntilTerminated, ResultCode) then
  begin
    Log(ExpandConstant('{tmp}\MicrosoftEdgeWebview2Setup.exe'));
    Log(Format('Webview2 Install Succeeded! Code: %d', [ResultCode]));
    Result := True;
  end
  else begin
    Log(ExpandConstant('{tmp}\MicrosoftEdgeWebview2Setup.exe'));
    Log(Format('Webview2 Install Failed! Code: %d', [ResultCode]));
    Result := False;
  end;
end;

var
  DownloadPage: TDownloadWizardPage;
function OnDownloadProgress(const Url, FileName: String; const Progress, ProgressMax: Int64): Boolean;
begin
  if Progress = ProgressMax then
    Log(Format('Successfully downloaded file to {tmp}: %s', [FileName]));
  Result := True;
end;

procedure InitializeWizard;
begin
  DownloadPage := CreateDownloadPage(SetupMessage(msgWizardPreparing), SetupMessage(msgPreparingDesc), @OnDownloadProgress);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if RegValueExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}', 
    'location') then
  begin
    Log('Webview2 found! Skipping Install.');
    Result := True;
  end
  else begin
    if CurPageID = wpReady then
    begin
      DownloadPage.Clear;
      DownloadPage.Add('https://go.microsoft.com/fwlink/p/?LinkId=2124703', 'MicrosoftEdgeWebview2Setup.exe', '');
      DownloadPage.Show;
      try
        DownloadPage.Download;
        InstallWebView2();
        Result := True;
      except
        SuppressibleMsgBox(AddPeriod(GetExceptionMessage), mbCriticalError, MB_OK, IDOK);
        Result := False;
      finally
        DownloadPage.Hide;
      end;
  end else
    Result := True;
  end
end;
